// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                      @id @default(autoincrement())
  name                   String
  email                  String                   @unique
  password               String
  zaps                   Zap[]
  forms                  Form[]
  telegramBots           TelegramBot[]
}

model Zap {
  id   String @id @default(uuid())
  name String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  zapRun  ZapRun[]
  trigger Trigger?
  action  Action[]
}

model Trigger {
  id String @id @default(uuid())

  zapId String @unique
  zap   Zap    @relation(fields: [zapId], references: [id])

  availableTriggerId String
  type               AvailableTrigger @relation(fields: [availableTriggerId], references: [id])
  sortingOrder       Int              @default(0)
  config             Json?

  // New optional relations for specific trigger types
  formId        String?        @unique
  form          Form?          @relation(fields: [formId], references: [id])

  telegramBotId String?
  telegramBot   TelegramBot?   @relation(fields: [telegramBotId], references: [id])
}

model AvailableTrigger {
  id   String @id @default(uuid())
  name String @unique

  triggers Trigger[]
}

model Action {
  id String @id @default(uuid())

  zapId String
  zap   Zap    @relation(fields: [zapId], references: [id], onDelete: Cascade)

  availableActionId String
  type              AvailableAction @relation(fields: [availableActionId], references: [id])
  config            Json?
}

model AvailableAction {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  actions Action[]
}

model ZapRun {
  id           String        @id @default(uuid())
  zapRunOutbox ZapRunOutbox?
  zapId        String
  metaData     Json
  zap          Zap           @relation(fields: [zapId], references: [id])

  // Execution status and results
  status      ZapRunStatus   @default(queued)
  output      Json?
  error       Json?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ZapRunOutbox {
  id       String @id @default(uuid())
  zapRunId String @unique
  zapRun   ZapRun @relation(fields: [zapRunId], references: [id])
}

// New models for Form Trigger
model Form {
  id          String   @id @default(uuid())
  name        String
  description String?
  fields      Json
  published   Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  submissions FormSubmission[]
  trigger     Trigger?
}

model FormSubmission {
  id          String   @id @default(uuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  data        Json
  submittedAt DateTime @default(now())
}

// New model for Telegram Bot Trigger
model TelegramBot {
  id        String   @id @default(uuid())
  name      String
  tokenEnc  String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  triggers  Trigger[]
}

enum ZapRunStatus {
  queued
  running
  success
  failed
}